import psycopg2
from datetime import date

# Function to connect to the database; establishes and returns a connection to the PostgreSQL database.
def connect_db():
    try:
        # Connect to postgres; Stores the connection object if the connection is successful
        conn = psycopg2.connect("dbname=HRC_test user=postgres password=Qsoft1234")
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")

# Establishing the connection; Stores the connection to the database by calling connect_db(). It connects to the HRC_test database.
connection = connect_db()


#Function to add record data
def add_record(records):
    """Insert a new data record into the hrc_Input table."""
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.executemany(
            "INSERT INTO hrc_input (date, issued_by, batch_id, vessel, qty_coil, tonnage, status) VALUES (%s, %s, %s, %s, %s, %s, %s)",
            (records)
        )
        conn.commit()  # Commit the transaction
        print("Records created successfully.")
    except Exception as e:
        print(f"Error creating record: {e}")
    finally:
        cursor.close()
        conn.close()

# Example; to test functionality
add_record([(date.today(), "Alis", "J813", "Pulau Taoyi", 10, 100, "Draft"),
            (date.today(), "Alis", "J814", "Kalapati", 20, 200, "Draft"),
            (date.today(), "Alis", "J815", "Pulau Taoyi", 30, 30, "Draft"),
            (date.today(), "Alis", "J816", "Tropical Venus", 70, 150, "Draft"),
            (date.today(), "Alis", "J817", "Tropical Venus", 15, 120, "Draft")])  # Create 5 new record


#Function to read record
def read_records():
    """Fetch all records from the hrc_input table."""
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM hrc_input")
        records = cursor.fetchall()  # Fetch all results
        for record in records:
            print(record)  # Print each record
    except Exception as e:
        print(f"Error reading records: {e}")
    finally:
        cursor.close()
        conn.close()

# Example; to test functionality
read_records()  # Read all records


#Function to update record
def update_record(new_issue_date, new_issued_by, new_batch_id, new_vessel, new_quantity, new_tonnage, new_status, batch_id):
    """Update an existing record in the hrc_input table."""
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE hrc_input SET date = %s, issued_by = %s, batch_id = %s, vessel = %s, qty_coil = %s, tonnage = %s, status = %s WHERE batch_id = %s",
            (new_issue_date, new_issued_by, new_batch_id, new_vessel, new_quantity, new_tonnage, new_status, batch_id)
        )
        conn.commit()  # Commit the transaction
        print("Record updated successfully.")
    except Exception as e:
        print(f"Error updating record: {e}")
    finally:
        cursor.close()
        conn.close()

# Example; to test functionality
update_record(date.today(), "Alis", "J812", "Kalapati", 8, 200, "Posted to Macola", "J813")  # Update record with batch_id="J813"


#Function to delete record
def delete_record(batch_id):
    """Delete a record from the hrc_input table."""
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM hrc_input WHERE batch_id = %s", (batch_id,))
        conn.commit()  # Commit the transaction
        print("Record deleted successfully.")
    except Exception as e:
        print(f"Error deleting record: {e}")
    finally:
        cursor.close()
        conn.close()

# Example; to test functionality
delete_record("J812")  # Delete record with batch_id="J812"
